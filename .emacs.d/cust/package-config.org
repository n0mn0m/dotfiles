#+STARTUP: overview 
#+PROPERTY: header-args :comments yes :results silent
* I prefer to keep my package installs in one list that way I don't build up a web of installs that's harder to track down.
  Note that repos have already been setup and refreshed in init.el which acts as an orchestrator.

#+BEGIN_SRC emacs-lisp
(use-package package
  :init
    (defvar my-packages)
    (setq my-packages
	  '(auto-package-update
            all-the-icons
	    async
	    cargo
	    company
	    counsel
	    csv-mode
	    dockerfile-mode
            eglot
	    evil
	    expand-region
	    exec-path-from-shell
	    fill-column-indicator
	    flycheck
            flycheck-aspell
            flycheck-inline
            flycheck-projectile
            flycheck-rust
            flycheck-yamllint
            ggtags
	    highlight-escape-sequences
	    ivy
	    ivy-hydra
	    json-mode
	    kaolin-themes
            keychain-environment
	    magit
	    markdown-mode
	    neotree
	    org
	    prescient
	    projectile
            racket-mode
	    rainbow-delimiters
	    rust-mode
	    sql-indent
	    toml-mode
            typescript-mode
	    use-package
            which-key
	    yaml-mode
	    yasnippet
            yasnippet-snippets
	    ))

    (dolist (pkg my-packages)
      (unless (package-installed-p pkg)
	(package-install pkg))))
#+END_SRC

* Package configuration

  Update and compile any out of date packages to find breaks early. If something is broke the use-package verbosity can be set in init.el

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
   :ensure t
   :config
   (setq auto-package-update-delete-old-versions t
         auto-package-update-interval 4
	 use-package-always-ensure t)
   (auto-package-update-maybe))

(use-package auto-compile
  :defer nil
  :config (auto-compile-on-load-mode))
#+END_SRC

  Providae MacOS keychain access for ssh and other settings

#+BEGIN_SRC emacs-lisp
(use-package keychain-environment
  :config
  (keychain-refresh-environment))
#+END_SRC

** Editor interaction configuration

#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :init
    (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))

(use-package smartparens
  :config
  (add-hook 'prog-mode-hook 'smartparens-mode))

(use-package expand-region
  :config
    (global-set-key (kbd "C-=") 'er/expand-region))

(use-package exec-path-from-shell
  :config
  (exec-path-from-shell-initialize))

(use-package magit
  :bind ("C-x g" . magit-status))

(use-package kaolin-themes
  :init
    (setq kaolin-themes-distinct-fringe t)
    (setq kaolin-themes-distinct-company-scrollbar t)
    (setq kaolin-themes-git-gutter-solid t)
  :config
    (load-theme 'kaolin-breeze t))

(use-package evil
  :init
    (setq evil-search-module 'evil-search)
    (setq evil-ex-complete-emacs-commands nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-shift-round nil)
    (setq evil-want-C-u-scroll t)
  :config
    (evil-mode))

(use-package all-the-icons)

(use-package neotree
  :bind
    ("<f8>" . neotree-toggle)
  :config
    (setq neo-theme (if (display-graphic-p) 'icons 'icons))
    ;; Disable line-numbers minor mode for neotree
    (add-hook 'neo-after-create-hook
              (lambda (&rest _) (display-line-numbers-mode -1)))
    (setq-default neo-show-hidden-files t)
    (setq neo-window-width 35)
    (setq neo-smart-open t)
    (set-face-attribute 'neo-button-face      nil :family "CozetteVector")
    (set-face-attribute 'neo-file-link-face   nil :family "CozetteVector")
    (set-face-attribute 'neo-dir-link-face    nil :family "CozetteVector")
    (set-face-attribute 'neo-header-face      nil :family "CozetteVector")
    (set-face-attribute 'neo-expand-btn-face  nil :family "CozetteVector"))

(use-package ivy
  :diminish (ivy-mode . "")
  :init
    (ivy-mode 1)
  :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-height 20)
    (setq ivy-count-format "%d/%d "))

(use-package prescient)

(use-package ivy-prescient
  :config
  (ivy-prescient-mode t))

(use-package projectile
  :diminish
  :bind (("C-c k" . 'projectile-kill-buffers)
  ("C-c M" . 'projectile-compile-project))
  :custom (projectile-completion-system 'ivy)
  :config (projectile-mode))

(use-package company
  :init
    (add-hook 'after-init-hook 'global-company-mode))

(use-package flycheck
  :config
    (add-hook 'after-init-hook 'global-flycheck-mode)
    (add-to-list 'flycheck-checkers 'proselint 'tex-aspell-dynamic)
    (setq-default flycheck-highlighting-mode 'lines)
    ;; Define fringe indicator / warning levels
    (define-fringe-bitmap 'flycheck-fringe-bitmap-ball
      (vector #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00011100
              #b00111110
              #b00111110
              #b00111110
              #b00011100
              #b00000000
              #b00000000
              #b00000000
              #b00000000
              #b00000000))
    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-error)
    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-warning)
    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'flycheck-fringe-bitmap-ball
      :fringe-face 'flycheck-fringe-info))

(use-package flycheck-aspell
  :config
  (setq ispell-dictionary "some_dictionary")
  (setq ispell-program-name "aspell")
  (setq ispell-silently-savep t))

(use-package flycheck-inline
  :defer t
  :init
  (progn
    (eval-after-load 'flycheck
      (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))))

(use-package flycheck-yamllint
  :defer t
  :init
  (progn
    (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook 'flycheck-yamllint-setup))))

(use-package which-key
  :custom
  (which-key-setup-side-window-bottom)
  (which-key-enable-extended-define-key t)
  (which-key-idle-delay 1.2)
  :config
  (which-key-setup-minibuffer))

(use-package dash-at-point
  :bind ("C-c d" . dash-at-point))
#+END_SRC

** Build, orchestration and deployment tools

#+BEGIN_SRC emacs-lisp
(use-package cargo
  :defer t
  :hook ((rust-mode toml-mode) . cargo-minor-mode))

(use-package dockerfile-mode
  :defer t
  :mode "Dockerfile\\'")

(use-package toml-mode
  :defer t
  :mode "\\.toml\\'")

(use-package yaml-mode
  :defer t
  :mode ("\\.yaml\\'" "\\.yml\\'")
  :bind ("\C-m" . 'newline-and-indent))
#+END_SRC

** Various Programming Mode Configurations

#+BEGIN_SRC emacs-lisp
(use-package ggtags
  :defer t
  :config
    (add-hook 'c-mode-common-hook
    (lambda ()
    (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
          (ggtags-mode 1)))))

(add-hook 'python-mode (lambda () 
  :defer t
  (setq-local
    python-shell-interpreter "ipython"
    python-shell-interpreter-args "--colors=Linux --profile=default"
    python-shell-prompt-regexp "In \\[[0-9]+\\]: "
    python-shell-prompt-output-regexp "Out\\[[0-9]+\\]: "
    python-shell-completion-setup-code "from IPython.core.completerlib import module_completion"
    python-shell-completion-module-string-code "';'.join(module_completion('''%s'''))\n"
    python-shell-completion-string-code "';'.join(get_ipython().Completer.all_completions('''%s'''))\n")))

(use-package rust-mode
  :defer t
  :mode "\\.rs\\'"
  :init
  (add-hook 'flycheck-mode-hook 'flycheck-rust-setup)
  :config (setq rust-format-on-save t))

(use-package racket-mode
  :defer t
  :mode "\\.rkt\\'"
  :init
  (setq font-lock-maximum-decoration 3)
  (add-hook 'racket-mode-hook
            (lambda ()
              (define-key racket-mode-map (kbd "<f5>") 'racket-run))))

(use-package eglot
  :commands (eglot eglot-ensure)
  :hook ((python-mode . eglot-ensure)
         (racket-mode . eglot-ensure)
         (rust-mode . eglot-ensure)
         (typescript-mode . eglot-ensure))
  :config
  (add-to-list 'eglot-server-programs '(rust-mode . ("rls")))
  (add-to-list 'eglot-server-programs '(python-mode . ("jedi-language-server"))))

(use-package yasnippet
  :defer t
  :config
    (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
    (yas-global-mode 1))
#+END_SRC

** Text modes

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))

(use-package plantuml-mode
  :defer t
  :mode "\\.plantuml\\'"
  :init
  (setq plantuml-executable-path "/usr/local/bin/plantuml")
  (setq plantuml-default-exec-mode 'executable))
#+END_SRC
